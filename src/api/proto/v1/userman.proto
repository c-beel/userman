syntax = "proto3";
package v1;

message User {
    // Unique integer assigned to each user
    int64 id = 1;

    // Unique string for each user
    string username = 2;

    // Nickname
    string nickname = 3;

    // Email address
    string email = 4;

    // First name
    string firstName = 5;

    // Last Name
    string lastName = 6;
}

message Group {
    // Unique integer assigned to each group
    int64 id = 1;

    // The name of the group
    string name = 2;
}

message CreateUserRequest {
    User user = 1;
}

message CreateUserResponse {
    User user = 1;
}

message ReadUserRequest {
    int64 uid = 1;
}

message ReadUserResponse {
    User user = 1;
}

message UpdateUserRequest {
    User user = 1;
}

message UpdateUserResponse {
    User user = 1;
}

message DeleteUserRequest {
    int64 uid = 1;
}

message DeleteUserResponse {
    User user = 1;
}

message CreateGroupRequest {
    Group group = 1;
}

message CreateGroupResponse {
    Group group = 1;
}

message ReadGroupListRequest {
}

message ReadGroupListResponse {
    repeated Group groups = 1;
}

message UpdateGroupRequest {
    Group group = 1;
}

message UpdateGroupResponse {
    Group group = 1;
}

message DeleteGroupRequest {
    int64 gid = 1;
}

message DeleteGroupResponse {
    Group group = 1;
}

message AddUserToGroupRequest {
    int64 uid = 1;
    string groupName = 2;
}

message AddUserToGroupResponse {
}

message RemoveUserFromGroupRequest {
    int64 uid = 1;
    string groupName = 2;
}

message RemoveUserFromGroupResponse {
}

message SetUserGroupsRequest {
    int64 uid = 1;
    repeated string groupNames = 2;
}

message SetUserGroupsResponse {
}

message GetUserGroupsListRequest {
    int64 uid = 1;
}

message GetUserGroupsListResponse {
    repeated Group groups = 1;
}

message IsMemberOfRequest {
    int64 uid = 1;
    string groupName = 2;
}

message IsMemberOfResponse {
    bool yes = 1;
}

message GetOrCreateUserByIdTokenRequest {
    string idToken = 1;
}

message GetOrCreateUserByIdTokenResponse {
    User user = 1;
    bool newUser = 2;
}

// Service to manage list of users and groups
service UsermanService {
    // CRUD User
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
    rpc ReadUser (ReadUserRequest) returns (ReadUserResponse);
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // CRD Group
    rpc CreateGroup (CreateGroupRequest) returns (CreateGroupResponse);
    rpc ReadGroupList (ReadGroupListRequest) returns (ReadGroupListResponse);
    rpc UpdateGroup (UpdateGroupRequest) returns (UpdateGroupResponse);
    rpc DeleteGroup (DeleteGroupRequest) returns (DeleteGroupResponse);

    // Membership handling
    rpc AddUserToGroup (AddUserToGroupRequest) returns (AddUserToGroupResponse);
    rpc RemoveUserFromGroup (RemoveUserFromGroupRequest) returns (RemoveUserFromGroupResponse);
    rpc IsMemberOf (IsMemberOfRequest) returns (IsMemberOfResponse);
    rpc SetUserGroups (SetUserGroupsRequest) returns (SetUserGroupsResponse);

    // Get a user's groups
    rpc GetUserGroupsList (GetUserGroupsListRequest) returns (GetUserGroupsListResponse);

    // OAuth Part
    rpc GetOrCreateUserByIdToken (GetOrCreateUserByIdTokenRequest) returns (GetOrCreateUserByIdTokenResponse);

}
